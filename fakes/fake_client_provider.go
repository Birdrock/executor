// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/pivotal-golang/lager"
)

type FakeClientProvider struct {
	WithLoggerStub        func(logger lager.Logger) executor.Client
	withLoggerMutex       sync.RWMutex
	withLoggerArgsForCall []struct {
		logger lager.Logger
	}
	withLoggerReturns struct {
		result1 executor.Client
	}
}

func (fake *FakeClientProvider) WithLogger(logger lager.Logger) executor.Client {
	fake.withLoggerMutex.Lock()
	fake.withLoggerArgsForCall = append(fake.withLoggerArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.withLoggerMutex.Unlock()
	if fake.WithLoggerStub != nil {
		return fake.WithLoggerStub(logger)
	} else {
		return fake.withLoggerReturns.result1
	}
}

func (fake *FakeClientProvider) WithLoggerCallCount() int {
	fake.withLoggerMutex.RLock()
	defer fake.withLoggerMutex.RUnlock()
	return len(fake.withLoggerArgsForCall)
}

func (fake *FakeClientProvider) WithLoggerArgsForCall(i int) lager.Logger {
	fake.withLoggerMutex.RLock()
	defer fake.withLoggerMutex.RUnlock()
	return fake.withLoggerArgsForCall[i].logger
}

func (fake *FakeClientProvider) WithLoggerReturns(result1 executor.Client) {
	fake.WithLoggerStub = nil
	fake.withLoggerReturns = struct {
		result1 executor.Client
	}{result1}
}

var _ executor.ClientProvider = new(FakeClientProvider)
