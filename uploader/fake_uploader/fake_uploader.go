// This file was generated by counterfeiter
package fake_uploader

import (
	"github.com/cloudfoundry-incubator/executor/uploader"
	"github.com/pivotal-golang/lager"

	"net/url"
	"sync"
)

type FakeUploader struct {
	UploadStub        func(fileLocation string, destinationUrl *url.URL, logger lager.Logger) (int64, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		fileLocation   string
		destinationUrl *url.URL
		logger         lager.Logger
	}
	uploadReturns struct {
		result1 int64
		result2 error
	}
}

func (fake *FakeUploader) Upload(fileLocation string, destinationUrl *url.URL, logger lager.Logger) (int64, error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		fileLocation   string
		destinationUrl *url.URL
		logger         lager.Logger
	}{fileLocation, destinationUrl, logger})
	if fake.UploadStub != nil {
		return fake.UploadStub(fileLocation, destinationUrl, logger)
	} else {
		return fake.uploadReturns.result1, fake.uploadReturns.result2
	}
}

func (fake *FakeUploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeUploader) UploadArgsForCall(i int) (string, *url.URL, lager.Logger) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].fileLocation, fake.uploadArgsForCall[i].destinationUrl, fake.uploadArgsForCall[i].logger
}

func (fake *FakeUploader) UploadReturns(result1 int64, result2 error) {
	fake.uploadReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

var _ uploader.Uploader = new(FakeUploader)
