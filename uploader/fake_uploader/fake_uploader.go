// This file was generated by counterfeiter
package fake_uploader

import (
	"net/url"
	"sync"
)

type FakeUploader struct {
	UploadStub        func(fileLocation string, destinationUrl *url.URL) (int64, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg1 string
		arg2 *url.URL
	}
	uploadReturns struct {
		result1 int64
		result2 error
	}
}

func (fake *FakeUploader) Upload(arg1 string, arg2 *url.URL) (int64, error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg1 string
		arg2 *url.URL
	}{arg1, arg2})
	if fake.UploadStub != nil {
		return fake.UploadStub(arg1, arg2)
	} else {
		return fake.uploadReturns.result1, fake.uploadReturns.result2
	}
}

func (fake *FakeUploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeUploader) UploadArgsForCall(i int) (string, *url.URL) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].arg1, fake.uploadArgsForCall[i].arg2
}

func (fake *FakeUploader) UploadReturns(result1 int64, result2 error) {
	fake.uploadReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}
