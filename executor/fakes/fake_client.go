// This file was generated by counterfeiter
package fakes

import (
	"github.com/cloudfoundry-incubator/executor/api"
	. "github.com/cloudfoundry-incubator/executor/executor"

	"sync"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeClient struct {
	InitializeContainerStub        func(guid string, request api.ContainerInitializationRequest) (api.Container, error)
	initializeContainerMutex       sync.RWMutex
	initializeContainerArgsForCall []struct {
		arg1 string
		arg2 api.ContainerInitializationRequest
	}
	initializeContainerReturns struct {
		result1 api.Container
		result2 error
	}
	RunContainerStub        func(guid string, actions []models.ExecutorAction, completeURL string) error
	runContainerMutex       sync.RWMutex
	runContainerArgsForCall []struct {
		arg1 string
		arg2 []models.ExecutorAction
		arg3 string
	}
	runContainerReturns struct {
		result1 error
	}
	DeleteContainerStub        func(guid string) error
	deleteContainerMutex       sync.RWMutex
	deleteContainerArgsForCall []struct {
		arg1 string
	}
	deleteContainerReturns struct {
		result1 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns struct {
		result1 error
	}
}

func (fake *FakeClient) InitializeContainer(arg1 string, arg2 api.ContainerInitializationRequest) (api.Container, error) {
	fake.initializeContainerMutex.Lock()
	defer fake.initializeContainerMutex.Unlock()
	fake.initializeContainerArgsForCall = append(fake.initializeContainerArgsForCall, struct {
		arg1 string
		arg2 api.ContainerInitializationRequest
	}{arg1, arg2})
	if fake.InitializeContainerStub != nil {
		return fake.InitializeContainerStub(arg1, arg2)
	} else {
		return fake.initializeContainerReturns.result1, fake.initializeContainerReturns.result2
	}
}

func (fake *FakeClient) InitializeContainerCallCount() int {
	fake.initializeContainerMutex.RLock()
	defer fake.initializeContainerMutex.RUnlock()
	return len(fake.initializeContainerArgsForCall)
}

func (fake *FakeClient) InitializeContainerArgsForCall(i int) (string, api.ContainerInitializationRequest) {
	fake.initializeContainerMutex.RLock()
	defer fake.initializeContainerMutex.RUnlock()
	return fake.initializeContainerArgsForCall[i].arg1, fake.initializeContainerArgsForCall[i].arg2
}

func (fake *FakeClient) InitializeContainerReturns(result1 api.Container, result2 error) {
	fake.initializeContainerReturns = struct {
		result1 api.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RunContainer(arg1 string, arg2 []models.ExecutorAction, arg3 string) error {
	fake.runContainerMutex.Lock()
	defer fake.runContainerMutex.Unlock()
	fake.runContainerArgsForCall = append(fake.runContainerArgsForCall, struct {
		arg1 string
		arg2 []models.ExecutorAction
		arg3 string
	}{arg1, arg2, arg3})
	if fake.RunContainerStub != nil {
		return fake.RunContainerStub(arg1, arg2, arg3)
	} else {
		return fake.runContainerReturns.result1
	}
}

func (fake *FakeClient) RunContainerCallCount() int {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return len(fake.runContainerArgsForCall)
}

func (fake *FakeClient) RunContainerArgsForCall(i int) (string, []models.ExecutorAction, string) {
	fake.runContainerMutex.RLock()
	defer fake.runContainerMutex.RUnlock()
	return fake.runContainerArgsForCall[i].arg1, fake.runContainerArgsForCall[i].arg2, fake.runContainerArgsForCall[i].arg3
}

func (fake *FakeClient) RunContainerReturns(result1 error) {
	fake.runContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteContainer(arg1 string) error {
	fake.deleteContainerMutex.Lock()
	defer fake.deleteContainerMutex.Unlock()
	fake.deleteContainerArgsForCall = append(fake.deleteContainerArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.DeleteContainerStub != nil {
		return fake.DeleteContainerStub(arg1)
	} else {
		return fake.deleteContainerReturns.result1
	}
}

func (fake *FakeClient) DeleteContainerCallCount() int {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	return len(fake.deleteContainerArgsForCall)
}

func (fake *FakeClient) DeleteContainerArgsForCall(i int) string {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	return fake.deleteContainerArgsForCall[i].arg1
}

func (fake *FakeClient) DeleteContainerReturns(result1 error) {
	fake.deleteContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Ping() error {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	if fake.PingStub != nil {
		return fake.PingStub()
	} else {
		return fake.pingReturns.result1
	}
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingReturns(result1 error) {
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

var _ Client = new(FakeClient)
