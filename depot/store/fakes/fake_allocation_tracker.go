// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot/store"
)

type FakeAllocationTracker struct {
	AllocateStub        func(executor.Container)
	allocateMutex       sync.RWMutex
	allocateArgsForCall []struct {
		arg1 executor.Container
	}
	DeallocateStub        func(string)
	deallocateMutex       sync.RWMutex
	deallocateArgsForCall []struct {
		arg1 string
	}
}

func (fake *FakeAllocationTracker) Allocate(arg1 executor.Container) {
	fake.allocateMutex.Lock()
	fake.allocateArgsForCall = append(fake.allocateArgsForCall, struct {
		arg1 executor.Container
	}{arg1})
	fake.allocateMutex.Unlock()
	if fake.AllocateStub != nil {
		fake.AllocateStub(arg1)
	}
}

func (fake *FakeAllocationTracker) AllocateCallCount() int {
	fake.allocateMutex.RLock()
	defer fake.allocateMutex.RUnlock()
	return len(fake.allocateArgsForCall)
}

func (fake *FakeAllocationTracker) AllocateArgsForCall(i int) executor.Container {
	fake.allocateMutex.RLock()
	defer fake.allocateMutex.RUnlock()
	return fake.allocateArgsForCall[i].arg1
}

func (fake *FakeAllocationTracker) Deallocate(arg1 string) {
	fake.deallocateMutex.Lock()
	fake.deallocateArgsForCall = append(fake.deallocateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.deallocateMutex.Unlock()
	if fake.DeallocateStub != nil {
		fake.DeallocateStub(arg1)
	}
}

func (fake *FakeAllocationTracker) DeallocateCallCount() int {
	fake.deallocateMutex.RLock()
	defer fake.deallocateMutex.RUnlock()
	return len(fake.deallocateArgsForCall)
}

func (fake *FakeAllocationTracker) DeallocateArgsForCall(i int) string {
	fake.deallocateMutex.RLock()
	defer fake.deallocateMutex.RUnlock()
	return fake.deallocateArgsForCall[i].arg1
}

var _ store.AllocationTracker = new(FakeAllocationTracker)
