// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot/store"
)

type FakeInitializedTracker struct {
	InitializeStub        func(executor.Container)
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		arg1 executor.Container
	}
	DeinitializeStub        func(string)
	deinitializeMutex       sync.RWMutex
	deinitializeArgsForCall []struct {
		arg1 string
	}
	SyncInitializedStub        func([]executor.Container)
	syncInitializedMutex       sync.RWMutex
	syncInitializedArgsForCall []struct {
		arg1 []executor.Container
	}
}

func (fake *FakeInitializedTracker) Initialize(arg1 executor.Container) {
	fake.initializeMutex.Lock()
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		arg1 executor.Container
	}{arg1})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		fake.InitializeStub(arg1)
	}
}

func (fake *FakeInitializedTracker) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeInitializedTracker) InitializeArgsForCall(i int) executor.Container {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return fake.initializeArgsForCall[i].arg1
}

func (fake *FakeInitializedTracker) Deinitialize(arg1 string) {
	fake.deinitializeMutex.Lock()
	fake.deinitializeArgsForCall = append(fake.deinitializeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.deinitializeMutex.Unlock()
	if fake.DeinitializeStub != nil {
		fake.DeinitializeStub(arg1)
	}
}

func (fake *FakeInitializedTracker) DeinitializeCallCount() int {
	fake.deinitializeMutex.RLock()
	defer fake.deinitializeMutex.RUnlock()
	return len(fake.deinitializeArgsForCall)
}

func (fake *FakeInitializedTracker) DeinitializeArgsForCall(i int) string {
	fake.deinitializeMutex.RLock()
	defer fake.deinitializeMutex.RUnlock()
	return fake.deinitializeArgsForCall[i].arg1
}

func (fake *FakeInitializedTracker) SyncInitialized(arg1 []executor.Container) {
	fake.syncInitializedMutex.Lock()
	fake.syncInitializedArgsForCall = append(fake.syncInitializedArgsForCall, struct {
		arg1 []executor.Container
	}{arg1})
	fake.syncInitializedMutex.Unlock()
	if fake.SyncInitializedStub != nil {
		fake.SyncInitializedStub(arg1)
	}
}

func (fake *FakeInitializedTracker) SyncInitializedCallCount() int {
	fake.syncInitializedMutex.RLock()
	defer fake.syncInitializedMutex.RUnlock()
	return len(fake.syncInitializedArgsForCall)
}

func (fake *FakeInitializedTracker) SyncInitializedArgsForCall(i int) []executor.Container {
	fake.syncInitializedMutex.RLock()
	defer fake.syncInitializedMutex.RUnlock()
	return fake.syncInitializedArgsForCall[i].arg1
}

var _ store.InitializedTracker = new(FakeInitializedTracker)
