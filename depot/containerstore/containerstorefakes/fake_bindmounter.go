// This file was generated by counterfeiter
package containerstorefakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot/containerstore"
	"github.com/cloudfoundry-incubator/executor/depot/log_streamer"
	"github.com/pivotal-golang/lager"
)

type FakeDependencyManager struct {
	DownloadCacheDependenciesStub        func(logger lager.Logger, mounts []executor.CacheDependency, logStreamer log_streamer.LogStreamer) (containerstore.BindMounts, error)
	downloadCacheDependenciesMutex       sync.RWMutex
	downloadCacheDependenciesArgsForCall []struct {
		logger      lager.Logger
		mounts      []executor.CacheDependency
		logStreamer log_streamer.LogStreamer
	}
	downloadCacheDependenciesReturns struct {
		result1 containerstore.BindMounts
		result2 error
	}
	ReleaseCacheDependenciesStub        func(logger lager.Logger, keys []containerstore.BindMountCacheKey) error
	releaseCacheDependenciesMutex       sync.RWMutex
	releaseCacheDependenciesArgsForCall []struct {
		logger lager.Logger
		keys   []containerstore.BindMountCacheKey
	}
	releaseCacheDependenciesReturns struct {
		result1 error
	}
}

func (fake *FakeDependencyManager) DownloadCacheDependencies(logger lager.Logger, mounts []executor.CacheDependency, logStreamer log_streamer.LogStreamer) (containerstore.BindMounts, error) {
	fake.downloadCacheDependenciesMutex.Lock()
	fake.downloadCacheDependenciesArgsForCall = append(fake.downloadCacheDependenciesArgsForCall, struct {
		logger      lager.Logger
		mounts      []executor.CacheDependency
		logStreamer log_streamer.LogStreamer
	}{logger, mounts, logStreamer})
	fake.downloadCacheDependenciesMutex.Unlock()
	if fake.DownloadCacheDependenciesStub != nil {
		return fake.DownloadCacheDependenciesStub(logger, mounts, logStreamer)
	} else {
		return fake.downloadCacheDependenciesReturns.result1, fake.downloadCacheDependenciesReturns.result2
	}
}

func (fake *FakeDependencyManager) DownloadCacheDependenciesCallCount() int {
	fake.downloadCacheDependenciesMutex.RLock()
	defer fake.downloadCacheDependenciesMutex.RUnlock()
	return len(fake.downloadCacheDependenciesArgsForCall)
}

func (fake *FakeDependencyManager) DownloadCacheDependenciesArgsForCall(i int) (lager.Logger, []executor.CacheDependency, log_streamer.LogStreamer) {
	fake.downloadCacheDependenciesMutex.RLock()
	defer fake.downloadCacheDependenciesMutex.RUnlock()
	return fake.downloadCacheDependenciesArgsForCall[i].logger, fake.downloadCacheDependenciesArgsForCall[i].mounts, fake.downloadCacheDependenciesArgsForCall[i].logStreamer
}

func (fake *FakeDependencyManager) DownloadCacheDependenciesReturns(result1 containerstore.BindMounts, result2 error) {
	fake.DownloadCacheDependenciesStub = nil
	fake.downloadCacheDependenciesReturns = struct {
		result1 containerstore.BindMounts
		result2 error
	}{result1, result2}
}

func (fake *FakeDependencyManager) ReleaseCacheDependencies(logger lager.Logger, keys []containerstore.BindMountCacheKey) error {
	fake.releaseCacheDependenciesMutex.Lock()
	fake.releaseCacheDependenciesArgsForCall = append(fake.releaseCacheDependenciesArgsForCall, struct {
		logger lager.Logger
		keys   []containerstore.BindMountCacheKey
	}{logger, keys})
	fake.releaseCacheDependenciesMutex.Unlock()
	if fake.ReleaseCacheDependenciesStub != nil {
		return fake.ReleaseCacheDependenciesStub(logger, keys)
	} else {
		return fake.releaseCacheDependenciesReturns.result1
	}
}

func (fake *FakeDependencyManager) ReleaseCacheDependenciesCallCount() int {
	fake.releaseCacheDependenciesMutex.RLock()
	defer fake.releaseCacheDependenciesMutex.RUnlock()
	return len(fake.releaseCacheDependenciesArgsForCall)
}

func (fake *FakeDependencyManager) ReleaseCacheDependenciesArgsForCall(i int) (lager.Logger, []containerstore.BindMountCacheKey) {
	fake.releaseCacheDependenciesMutex.RLock()
	defer fake.releaseCacheDependenciesMutex.RUnlock()
	return fake.releaseCacheDependenciesArgsForCall[i].logger, fake.releaseCacheDependenciesArgsForCall[i].keys
}

func (fake *FakeDependencyManager) ReleaseCacheDependenciesReturns(result1 error) {
	fake.ReleaseCacheDependenciesStub = nil
	fake.releaseCacheDependenciesReturns = struct {
		result1 error
	}{result1}
}

var _ containerstore.DependencyManager = new(FakeDependencyManager)
