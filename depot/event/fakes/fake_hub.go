// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot/event"
)

type FakeHub struct {
	EmitEventStub        func(executor.Event)
	emitEventMutex       sync.RWMutex
	emitEventArgsForCall []struct {
		arg1 executor.Event
	}
	SubscribeStub        func() <-chan executor.Event
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct{}
	subscribeReturns struct {
		result1 <-chan executor.Event
	}
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
}

func (fake *FakeHub) EmitEvent(arg1 executor.Event) {
	fake.emitEventMutex.Lock()
	fake.emitEventArgsForCall = append(fake.emitEventArgsForCall, struct {
		arg1 executor.Event
	}{arg1})
	fake.emitEventMutex.Unlock()
	if fake.EmitEventStub != nil {
		fake.EmitEventStub(arg1)
	}
}

func (fake *FakeHub) EmitEventCallCount() int {
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	return len(fake.emitEventArgsForCall)
}

func (fake *FakeHub) EmitEventArgsForCall(i int) executor.Event {
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	return fake.emitEventArgsForCall[i].arg1
}

func (fake *FakeHub) Subscribe() <-chan executor.Event {
	fake.subscribeMutex.Lock()
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct{}{})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub()
	} else {
		return fake.subscribeReturns.result1
	}
}

func (fake *FakeHub) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeHub) SubscribeReturns(result1 <-chan executor.Event) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan executor.Event
	}{result1}
}

func (fake *FakeHub) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeHub) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

var _ event.Hub = new(FakeHub)
